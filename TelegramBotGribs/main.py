import asyncio
import logging
import sys
from os import getenv
from aiogram import F
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
import sqlite3
from PIL import Image
import io

TOKEN = ''
dp = Dispatcher()
korzina = []


async def send_resized_image_to_telegram(chat_id, photo, bot):
    resized_image = resize_image(photo)
    with io.BytesIO(await resized_image) as file:
        await bot.send_photo(chat_id, file)


async def resize_image(image_data, size=(200, 200)):
    image = Image.open(io.BytesIO(image_data))  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    image = image.resize(size)  # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    output = io.BytesIO()  # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞
    image.save(output, format='PNG')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
    return output.getvalue()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ


@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    kb = [[types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä"), types.KeyboardButton(text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {hbold(message.from_user.full_name)}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)


@dp.message(F.text.lower() == "–≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def with_puree(message: types.Message):
    kb = [
            [types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚¨Ö"), types.KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")],
            [types.KeyboardButton(text="üåø –†–∞–ø—ç –ø–ª–µ–º–µ–Ω–Ω–æ–µ üßòüèº‚Äç‚ôÇ"), types.KeyboardButton(text="üçÑ –ú—É—Ö–æ–º–æ—Ä—ã  —à–ª—è–ø–∫–∏ üçÑ")],
            [types.KeyboardButton(text="ü¶î –¶–µ–ª—å–Ω—ã–π –≥—Ä–∏–± ü¶î"), types.KeyboardButton(text="üíä –ú–∏–∫—Ä–æ–¥–æ–∑–∏–Ω–≥ –≤ –∫–∞–ø—Å—É–ª–∞—Ö üíä")],
            [types.KeyboardButton(text="‚≠ê –ú–æ–ª–æ—Ç—ã–π ‚≠ê"), types.KeyboardButton(text="ü•§ –ù–∞—Å—Ç–æ–π–∫–∏ ü•§")],
            [types.KeyboardButton(text="üçÑ –ú—É—Ö–æ–º–æ—Ä–Ω—ã–µ –∫—Ä–µ–º–∞ üçÑ"), types.KeyboardButton(text="üå± –ß–∞–π üå±")],
        ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)


#Done
@dp.message(F.text.lower() == "üçÑ –º—É—Ö–æ–º–æ—Ä—ã  —à–ª—è–ø–∫–∏ üçÑ")
async def with_puree_muhamor(message: types.Message):
    name_one_filter = []
    sqlite_connection = sqlite3.connect('sqlite_python.db')
    cursor = sqlite_connection.cursor()
    cursor.execute("SELECT * FROM list_gribs WHERE topic='–®–ª—è–ø–∫–∏'")
    records = cursor.fetchall()

    record_photo = cursor.fetchone()
    if record_photo:
        image_data = record_photo[0]
        size = (200, 200)

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö BLOB –∏ –∏–∑–º–µ–Ω—è–µ–º –µ–≥–æ —Ä–∞–∑–º–µ—Ä
        image = Image.open(io.BytesIO(image_data))
        image = image.resize(size)

        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
        output = io.BytesIO()
        image.save(output, format='PNG')

        # –ü–æ–ª—É—á–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
        image_bytes = output.getvalue()

    kb = [
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨Ö")],
        [types.KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")],
    ]
    for i in range(0, len(records), 2):
        record_current = records[i][1]
        if i + 1 < len(records):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            record_next = records[i + 1][1]
            kb.append([types.KeyboardButton(text=f"–¢–æ–≤–∞—Ä: {record_current}"),
                       types.KeyboardButton(text=f"–¢–æ–≤–∞—Ä: {record_next}")])
        else:
            kb.append([types.KeyboardButton(text=f"–¢–æ–≤–∞—Ä: {record_current}")])

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(f"üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª: üçÑ –ú—É—Ö–æ–º–æ—Ä—ã  —à–ª—è–ø–∫–∏ üçÑ\n\n"
                         "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –ø—Ä–æ—Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
                         "‚öñÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é —Ä–∞–∑–Ω—ã–π –≤–µ—Å. ‚öñ",
                         reply_markup=keyboard)

    @dp.message(lambda message: message.text.startswith("–¢–æ–≤–∞—Ä:"))
    async def show_product_details_muhamor(message: types.Message):
        name = message.text.split(": ")[1]
        sqlite_connection = sqlite3.connect('sqlite_python.db')
        cursor = sqlite_connection.cursor()
        cursor.execute("SELECT * FROM list_gribs WHERE name=?", (name,))
        records = cursor.fetchall()
        if len(records) > 0:
            kb = [
                [types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨Ö"), types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")],
                [types.KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")],
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

            name_one_filter.append(f"{name} {records[0][2]} {records[0][3]}")
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {name}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n–í–µ—Å: {records[0][2]}‚öñ\n–¶–µ–Ω–∞: {records[0][3]}üíµ", reply_markup=keyboard)

    @dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")
    async def request_quantity_1(message: types.Message):
        kb = [[types.KeyboardButton(text="–ú–µ–Ω—é üçÑ –ú—É—Ö–æ–º–æ—Ä—ã  —à–ª—è–ø–∫–∏ üçÑ‚¨Ö")], [types.KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")]]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer(f"–ü—Ä–æ–¥—É–∫—Ç {name_one_filter[0]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 1 —à—Ç", reply_markup=keyboard)
        korzina.append(f"{name_one_filter[0][0:]} 1 —à—Ç")
        name_one_filter.clear()

        @dp.message(lambda message: message.text == "–ú–µ–Ω—é üçÑ –ú—É—Ö–æ–º–æ—Ä—ã  —à–ª—è–ø–∫–∏ üçÑ‚¨Ö")
        async def record_quantity_1(message: types.Message):
            await with_puree_muhamor(message)

    @dp.message(lambda message: message.text == "–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")
    async def request_quantity_2(message: types.Message):
        kb = [[types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨Ö")], [types.KeyboardButton(text="1"), types.KeyboardButton(text="2"), types.KeyboardButton(text="3")],[types.KeyboardButton(text="4"), types.KeyboardButton(text="5"), types.KeyboardButton(text="6")],[types.KeyboardButton(text="7"), types.KeyboardButton(text="8"), types.KeyboardButton(text="9")], [types.KeyboardButton(text="10")]]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)

        @dp.message(lambda message: message.text.isdigit())
        async def record_quantity_2(message: types.Message):
            quantity = int(message.text)
            kb = [[types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨Ö"), types.KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")]]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            # quantity - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –¥–∞–ª–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
            # –∏ –¥–∞–ª–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∏–∑–Ω—É
            await message.answer(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: üåø {name_one_filter[0]}\n\n–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: {quantity} —à—Ç—É–∫", reply_markup=keyboard)
            korzina.append(f'{name_one_filter[0][0:]} {quantity} —à—Ç')
            name_one_filter.clear()


#Done
@dp.message(F.text.lower() == "üåø —Ä–∞–ø—ç –ø–ª–µ–º–µ–Ω–Ω–æ–µ üßòüèº‚Äç‚ôÇ")
async def with_puree_rape(message: types.Message):
    name_one_filter = []
    sqlite_connection = sqlite3.connect('sqlite_python.db')
    cursor = sqlite_connection.cursor()
    cursor.execute("SELECT * FROM list_gribs WHERE topic='–†–∞–ø—ç' ")
    records = cursor.fetchall()
    kb = [
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨Ö")],
        [types.KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")],
    ]
    for i in range(0, len(records), 2):
        record_current = records[i][1]
        if i + 1 < len(records):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            record_next = records[i + 1][1]
            kb.append([types.KeyboardButton(text=f"–¢–æ–≤–∞—Ä: {record_current}"),
                       types.KeyboardButton(text=f"–¢–æ–≤–∞—Ä: {record_next}")])
        else:
            kb.append([types.KeyboardButton(text=f"–¢–æ–≤–∞—Ä: {record_current}")])

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª: –†–∞–ø—ç –ø–ª–µ–º–µ–Ω–Ω–æ–µ! üåø\n\n"
                         "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –ø—Ä–æ—Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
                         "‚öñÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏–º–µ—é—Ç –≤–µ—Å 5 –≥—Ä–∞–º–º. ‚öñÔ∏è",
                         reply_markup=keyboard)

    @dp.message(lambda message: message.text.startswith("–¢–æ–≤–∞—Ä:"))
    async def show_product_details_rape(message: types.Message):
        name = message.text.split(": ")[1]
        sqlite_connection = sqlite3.connect('sqlite_python.db')
        cursor = sqlite_connection.cursor()
        cursor.execute("SELECT * FROM list_gribs WHERE name=?", (name,))
        records = cursor.fetchall()
        if len(records) > 0:
            kb = [
                [types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨Ö"), types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")],
                [types.KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")],
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

            name_one_filter.append(f"{name} {records[0][2]} {records[0][3]}")
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {name}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n–í–µ—Å: {records[0][2]}‚öñ\n–¶–µ–Ω–∞: {records[0][3]}üíµ", reply_markup=keyboard)
            print(f'{name_one_filter}')

    @dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")
    async def request_quantity_1_rape(message: types.Message):
        kb = [[types.KeyboardButton(text="–ú–µ–Ω—é üåø –†–∞–ø—ç –ø–ª–µ–º–µ–Ω–Ω–æ–µ! üåø‚¨Ö")], [types.KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")]]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer(f"–ü—Ä–æ–¥—É–∫—Ç {name_one_filter[0]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 1 —à—Ç", reply_markup=keyboard)
        korzina.append(f"{name_one_filter[0][0:]} 1 —à—Ç")
        name_one_filter.clear()

        @dp.message(lambda message: message.text == "–ú–µ–Ω—é üåø –†–∞–ø—ç –ø–ª–µ–º–µ–Ω–Ω–æ–µ! üåø‚¨Ö")
        async def record_quantity_1_rape(message: types.Message):
            await with_puree_rape(message)

    @dp.message(lambda message: message.text == "–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")
    async def request_quantity_2_rape(message: types.Message):
        kb = [[types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨Ö")], [types.KeyboardButton(text="1"), types.KeyboardButton(text="2"), types.KeyboardButton(text="3")],[types.KeyboardButton(text="4"), types.KeyboardButton(text="5"), types.KeyboardButton(text="6")],[types.KeyboardButton(text="7"), types.KeyboardButton(text="8"), types.KeyboardButton(text="9")], [types.KeyboardButton(text="10")]]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)

        @dp.message(lambda message: message.text.isdigit())
        async def record_quantity_2_rape(message: types.Message):
            quantity = int(message.text)
            kb = [[types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨Ö"), types.KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")]]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            # quantity - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –¥–∞–ª–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
            # –∏ –¥–∞–ª–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∏–∑–Ω—É
            await message.answer(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: üåø {name_one_filter[0]}\n\n–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: {quantity} —à—Ç—É–∫", reply_markup=keyboard)
            korzina.append(f'{name_one_filter[0][0:]} {quantity} —à—Ç')
            name_one_filter.clear()

    @dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥ ‚¨Ö")
    async def request_quantity_3_rape(message: types.Message):
        await with_puree_rape(message)

@dp.message(F.text.lower() == "—Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
async def without_puree(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")




@dp.message(F.text.lower() == "–∫–æ—Ä–∑–∏–Ω–∞")
async def korzina_main_list(message: types.Message):
    if len(korzina) != 0:
        print(korzina)
        kd = [
            [types.KeyboardButton(text=f"–û—Ç—á–∏—Å—Ç–∏—Ç—å"), types.KeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")]
        ]
        for product in korzina:
            kd.append([types.KeyboardButton(text=f"{product}")])

        keyboard = types.ReplyKeyboardMarkup(keyboard=kd, resize_keyboard=True)
        await message.answer(f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã",
                             reply_markup=keyboard)
    else:
        kd = [
            [types.KeyboardButton(text=f"–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∫—É–ø–∫–∞–º üõç")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kd, resize_keyboard=True)
        await message.answer(f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã\n\n–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ üòî",
                             reply_markup=keyboard)

        @dp.message(F.text.lower() == "–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∫—É–ø–∫–∞–º üõç")
        async def start_shopping(message: types.Message):
            await with_puree(message)


@dp.message(F.text.lower() == "–≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚¨Ö")
async def without_puree(message: types.Message):
    kb = [[types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä"), types.KeyboardButton(text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")], [types.KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)


async def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ–±–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å –ø–æ–º–æ—â—å—é defaultparsemode, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤—Å–µ–º –≤—ã–∑–æ–≤–∞–º API
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    # –ò –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—Å–∫–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())


